# Production Dockerfile for Page Scraper Service
# Multi-stage build with Puppeteer support

# Stage 1: Build
# Note: Base image runs as root during build (required for compilation)
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies for Puppeteer
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont

# Copy package files
COPY package*.json ./

# Install dependencies
# Using --ignore-scripts for security to prevent execution of npm scripts
RUN npm ci --ignore-scripts

# Copy only necessary source files (not recursive)
# Explicitly copy what's needed to avoid inadvertently adding sensitive data
COPY tsconfig.json ./
COPY src ./src

# Build TypeScript
RUN npm run build

# Stage 2: Production
# Note: Base image runs as root during setup, switches to non-root for runtime
FROM node:20-alpine AS production

# Build arguments for customization
ARG GITHUB_ORG=rpgoldberg
ARG GITHUB_REPO=page-scraper

# Add labels
LABEL org.opencontainers.image.title="Figure Collector Page Scraper"
LABEL org.opencontainers.image.description="Web scraping service with Puppeteer"
LABEL org.opencontainers.image.vendor="Figure Collector Services"
LABEL org.opencontainers.image.source="https://github.com/${GITHUB_ORG}/${GITHUB_REPO}"

# Install runtime dependencies and create non-root user in a single layer
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    dumb-init && \
    addgroup -g 1001 -S pptruser && \
    adduser -S pptruser -u 1001

# Set Puppeteer environment variables (Alpine Chromium path)
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium \
    NODE_ENV=production

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies
# Using --ignore-scripts for security to prevent execution of npm scripts  
RUN npm ci --only=production --ignore-scripts && npm cache clean --force

# Copy only built application files with proper ownership
# Be explicit about what to copy to avoid sensitive data exposure
COPY --from=builder --chown=root:root /app/dist ./dist

# Set read-only permissions on application files
RUN find /app/dist -type f -exec chmod 644 {} \; && \
    find /app/dist -type d -exec chmod 755 {} \;

# Create necessary directories with proper permissions
# Puppeteer needs writable directories for downloads and temporary files
RUN mkdir -p /tmp/puppeteer /app/downloads /app/screenshots && \
    chown -R pptruser:pptruser /tmp/puppeteer /app/downloads /app/screenshots && \
    chmod 755 /tmp/puppeteer /app/downloads /app/screenshots

# Switch to non-root user
USER pptruser

# Expose port (app defaults to 3000 unless overridden)
EXPOSE 3000

# Health check that respects PORT (defaults to 3000)
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD node -e "const http=require('http');const port=process.env.PORT||3000;http.get(\`http://localhost:\${port}/health\`,(r)=>{if(r.statusCode!==200)process.exit(1)}).on('error',()=>process.exit(1));"

# Use dumb-init to handle signals
ENTRYPOINT ["dumb-init", "--"]

# Start application (use dist/index.js for TypeScript builds)
CMD ["node", "dist/index.js"]