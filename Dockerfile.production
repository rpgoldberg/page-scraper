# Production Dockerfile for Page Scraper Service
# Multi-stage build with Puppeteer support

# Stage 1: Build
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies for Puppeteer
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont

# Copy package files
COPY package*.json ./

# Install dependencies
# Using --ignore-scripts for security to prevent execution of npm scripts
RUN npm ci --ignore-scripts

# Copy source code
COPY . .

# Build TypeScript (if applicable)
RUN npm run build || echo "No build step"

# Stage 2: Production
FROM node:20-alpine AS production

# Build arguments for customization
ARG GITHUB_ORG=rpgoldberg
ARG GITHUB_REPO=page-scraper

# Add labels
LABEL org.opencontainers.image.title="Figure Collector Page Scraper"
LABEL org.opencontainers.image.description="Web scraping service with Puppeteer"
LABEL org.opencontainers.image.vendor="Figure Collector Services"
LABEL org.opencontainers.image.source="https://github.com/${GITHUB_ORG}/${GITHUB_REPO}"

# Install runtime dependencies and create non-root user in a single layer
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    dumb-init && \
    addgroup -g 1001 -S pptruser && \
    adduser -S pptruser -u 1001

# Set Puppeteer environment variables
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser \
    NODE_ENV=production

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies
# Using --ignore-scripts for security to prevent execution of npm scripts  
RUN npm ci --only=production --ignore-scripts && npm cache clean --force

# Copy application from builder with read-only permissions
# Files are owned by root:root with 644 permissions (read-only for non-root)
COPY --from=builder --chown=root:root --chmod=644 /app/dist ./dist 2>/dev/null || true
COPY --from=builder --chown=root:root --chmod=644 /app/src ./src 2>/dev/null || true
COPY --chown=root:root --chmod=644 *.js ./ 2>/dev/null || true

# Create necessary directories with proper permissions
# Puppeteer needs writable directories for downloads and temporary files
RUN mkdir -p /tmp/puppeteer /app/downloads /app/screenshots && \
    chown -R pptruser:pptruser /tmp/puppeteer /app/downloads /app/screenshots && \
    chmod 755 /tmp/puppeteer /app/downloads /app/screenshots

# Switch to non-root user
USER pptruser

# Expose port
EXPOSE 3005

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3005/health', (r) => {if(r.statusCode !== 200) throw new Error()})"

# Use dumb-init to handle signals
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "index.js"]